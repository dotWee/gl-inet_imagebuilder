#!/bin/sh /etc/rc.common

START=10

ddns=
mac=
nand=
model=
first_time=

check_firstime(){
	old_ssid=$(uci get wireless.@wifi-iface[0].ssid 2>/dev/null)
	old_mode=$(uci get wireless.@wifi-iface[0].mode 2>/dev/null)

	#set the default wireless config, only if not reserved config when update firmware
	if [ "$old_mode" = "ap" ] && ( [ -z "$old_ssid" ] || [ "$old_ssid" = "GL" ] || [ "$old_ssid" = "OpenWrt" ] || [ "$old_ssid" = "LEDE" ] )
	then
		first_time=yes
	fi
}

read_factory_data(){
	#get basic device information
	model=$(awk -F': ' '/machine/ {print tolower($NF)}' /proc/cpuinfo |cut -d- -f2-)
	[ -n "$(grep "Domino Pi" /proc/cpuinfo)" ] && model="domino"
	[ -n "$(grep "DK01" /proc/device-tree/model)" ] && model="b1300"

	if [ "$model" = "connect inet v1" ]; then
		model="iNet"
		ddns=$(dd if=/dev/mtd0 bs=1 skip=$((0x1fc10)) count=7 2>/dev/null)
	elif [ "$model" = "ar150" ] || [ "$model" = "domino" ] || [ "$model" = "ar300" ] || [ "$model" = "ar300m" ] || [ "$model" = "x750" ] || [ "$model" = "ar750" ] || [ "$model" = "ar750s" ] || [ "$model" = "mifi" ] || [ "$model" = "usb150" || [ "$model" = "x1200" ]; then
		nand=$(cat /proc/mounts |grep 'ubi0_1.*overlay')
		art_mtd=$(cat /proc/mtd | awk -F: '/art/{print $1}')
		ddns=$(dd if=/dev/$art_mtd bs=1 skip=$((0x10)) count=7 2>/dev/null)
	elif [ "$model" = "mt300a" ] || [ "$model" = "mt300n" ] || [ "$model" = "mt750" ] || [ "$model" = "mt300n-v2" ] || [ "$model" = "vixmini" ]; then
		ddns=$(dd if=/dev/mtd2 bs=1 skip=$((0x4010)) count=7 2>/dev/null)
	elif [ "$model" = "b1300" ]; then
		art_mtd=$(cat /proc/mtd | awk -F: '/0:ART/{print $1}')
		ddns=$(dd if=/dev/$art_mtd bs=1 skip=$((0x10)) count=7 2>/dev/null)
		mac_byte5=$(dd if=/dev/$art_mtd bs=1 skip=4 count=1  2>/dev/null | hexdump -e '"%02X"')
		mac_byte6=$(dd if=/dev/$art_mtd bs=1 skip=5 count=1  2>/dev/null | hexdump -e '"%02X"')
	fi
	letter0=$(printf "%x" "'${ddns:0:1}")
	letter5=$(printf "%x" "'${ddns:5:1}")

	if [ "$letter0" = "ff" ]; then
		mac=DEADBEEF
	elif [ "$letter5" = "ff" ]; then
		mac=${ddns:2:3}
	else
		mac=${ddns:4:3}
	fi

	[ "$model" = "b1300" ] && mac=${mac_byte5:1:1}${mac_byte6}

	#upper case all model
	if [ "$model" != "iNet" ]; then
		model=$(echo $model | awk '{ print toupper($1); }')
	fi
}

fix_ssid_5g(){
	#new ssid format
	ssid_prefix="GL-"${model}
	ssid=${ssid_prefix}"-"${mac}-5G

	device=$1
	index=$2
	#uci delete wireless.$device.disabled
	uci set wireless.@wifi-iface[$index].ssid=$ssid
	uci set wireless.@wifi-iface[$index].encryption=psk-mixed
	uci set wireless.@wifi-iface[$index].key=goodlife
	[ "$model" != "B1300" ] && uci set wireless.@wifi-iface[$index].ifname=wlan$index
	uci set wireless.@wifi-iface[$index].wds=1
	case "$model" in
		"AR300M")
			uci set wireless.$device.txpower='15'
			uci set wireless.$device.band='5G'
			if [ -z "$nand" ]; then
				uci set wireless.@wifi-iface[$index].ssid=${ssid}-NOR
			fi
			;;
		"X750" |\
		"X1200" |\
		"AR750S")
			ln -s /usr/bin/ip /usr/sbin/ip
			uci set wireless.$device.doth='0'
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			;;
		"AR750")
			ln -s /usr/bin/ip /usr/sbin/ip
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.band='5G'
			uci set wireless.$device.disabled='0'
			;;
		"MT750")
			uci set wireless.$device.txpower='20'
			;;
		"B1300")
			uci set wireless.$device.disabled='0'
			;;
		*)
	esac
}

fix_ssid_24g(){
	#new ssid format
	ssid_prefix="GL-"${model}
	[ "$model" = "VIXMINI" ] && ssid_prefix="VIXMINI"
	ssid=${ssid_prefix}"-"${mac}

	device=$1
	index=$2
	uci set wireless.$device.hwmode='11g'
	uci delete wireless.$device.disabled
	uci set wireless.@wifi-iface[$index].ssid=$ssid
	uci set wireless.@wifi-iface[$index].encryption=psk-mixed
	uci set wireless.@wifi-iface[$index].key=goodlife
	uci set wireless.@wifi-iface[$index].wds=1
	[ "$model" != "B1300" ] && uci set wireless.@wifi-iface[$index].ifname=wlan$index
	[ "$model" = "MT300N-V2" -o "$model" = "VIXMINI" ] && uci set wireless.@wifi-iface[$index].ifname=ra$index

	case "$model" in
		"X750" |\
		"X1200" |\
		"AR750S")
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"AR750")
			uci set wireless.$device.txpower='20'
			uci set wireless.$device.band='2G'
			uci set wireless.$device.disabled='0'
			;;
		"AR300")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.txpower='20'
			;;
		"AR300M")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.txpower='20'
			if [ -z "$nand" ]; then
				uci set wireless.@wifi-iface[$index].ssid=${ssid}-NOR
			fi
			;;
		"AR150" |\
		"MIFI" |\
		"USB150" |\
		"iNet")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.txpower='18'
			;;
		"MT300A" |\
		"MT300N" |\
		"VIXMINI" |\
		"MT300N-V2")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.txpower='20'
			uci delete wireless.rai0
			uci delete wireless.mt7610e
			;;
		"MT750")
			uci set wireless.$device.txpower='20'
			;;
		"AR750")
			uci set wireless.$device.channel='6'
			uci set wireless.$device.htmode='HT40'
			uci set wireless.$device.noscan='1'
			uci set wireless.$device.txpower='20'
			;;
		*)
	esac
}

fix_ssid(){

	i=0
	while [ "$i" -le "10" ]; do
		device=$(uci get wireless.@wifi-iface[$i].device)
		if [ -z "$device" ]; then
			break
		fi
		htmode=$(uci get wireless.$device.htmode)
		hwmode=$(uci get wireless.$device.hwmode)
		if [ "$htmode" = "VHT80" ] || [ "$hwmode" = "11a" ] || [ "$hwmode" = "11ac" ]; then
			fix_ssid_5g $device $i
		else
			fix_ssid_24g $device $i
		fi
		i=$((i+1))
	done

	uci commit wireless
}

fix_misc(){
	#some settings are not reserved after update firmware, must do the action again
	uci set firewall.@include[0].reload='1'
	uci commit firewall
	case "$model" in
		"AR300M")
			;;
		"MT300A" |\
		"MT300N")
			rmmod mt7610e
			rm /etc/modules.d/*mt7610e
			;;
		"MT750")
			cp /etc/banner-mt750 /etc/banner
			;;
		"MT300N-V2")
			;;
		"MIFI" |\
		"AR750" |\
		"X750")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1.2
			uci commit glconfig
			;;
		"AR750S")
			uci delete glconfig.modem
			uci set glconfig.modem=server
			uci add_list glconfig.modem.bus=1-1
			uci commit glconfig
			;;			
		"B1300")
			uci set wireless.@wifi-iface[0].ifname='ath0'
			uci set wireless.@wifi-iface[1].ifname='ath1'
			uci set wireless.wifi0.htmode='HT20'
			uci set wireless.wifi1.htmode='VHT80'
			uci commit wireless
			;;
		*)
	esac
}

generate_network_config() {
		. /lib/functions.sh
		. /lib/functions/uci-defaults.sh
		. /lib/functions/system.sh

		# Use as WAN by default, remove lan interface
		uci set network.lan.ifname=''

        uci -q batch <<-EOF
                delete network.lan_dev
                delete network.wan
                set network.wan=interface
                set network.wan.ifname='eth0'
                set network.wan.proto='dhcp'
		EOF
}

fix_sys(){
	#configure network settings; don't do it when upgraded

	case "$model" in
		"VIXMINI")
			generate_network_config
			;;
		*)
			;;
	esac

	uci set network.lan.hostname="$ssid"
	old_wanhost=$(uci get network.wan.hostname)
	old_lanip=$(uci get network.lan.ipaddr)
	if [ -z "$old_wanhost" ]; then
		if [ "$old_wanhost" = $ssid_prefix ] || [ -z "$old_wanhost" ]; then
			uci set network.wan.hostname="$ssid"
		fi
		uci set system.@system[0].hostname="$ssid_prefix"
		uci commit system
		uci set samba.@samba[0].name="$ssid_prefix"
		uci set samba.@samba[0].description="$ssid"
		uci commit samba
		if [ "$old_lanip" = "192.168.1.1" ]; then
			uci set network.lan.ipaddr="192.168.8.1"
		fi
		uci commit network
	fi

	grep "sleep.*gl_health" /etc/rc.local
	if [ $? -ne 0 ]; then
		cp /rom/etc/rc.local /etc/
	fi

}


start(){
	#fixme: when this script executed, wireless configuration was not built, we need to wait a little bit.
	while [ ! -e "/etc/config/wireless" ]; do
		echo "---Warning: wireless was not built, wait and try... " > /dev/console
		sleep 2
	done
	sleep 1
	check_firstime
	read_factory_data
	if [ -n "$first_time" ]; then
		fix_ssid
		fix_sys
		sync
	fi
	#make this run if upgrade from old version and reserved settings
	fix_misc

	/etc/init.d/uhttpd disable
	/etc/init.d/gl_init disable
	/etc/init.d/ipsec disable
	/etc/init.d/xl2tpd disable
}


