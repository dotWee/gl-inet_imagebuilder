#!/bin/sh
#
# This file is interpreted as shell script.
# Put your custom mwan3 action here, they will
# be executed with each netifd hotplug interface event
# on interfaces for which mwan3 is enabled.
#
# There are three main environment variables that are passed to this script.
#
# $ACTION
#      <ifup>         Is called by netifd and mwan3track
#      <ifdown>       Is called by netifd and mwan3track
#      <connected>    Is only called by mwan3track if tracking was successful
#      <disconnected> Is only called by mwan3track if tracking has failed
# $INTERFACE	Name of the interface which went up or down (e.g. "wan" or "wwan")
# $DEVICE	Physical device name which interface went up or down (e.g. "eth0" or "wwan0")

. /lib/functions.sh
. /lib/functions/network.sh

refresh_route() {
	local ip
	local gw
	local dev
	local inet
	local iface
	local device
	local server="$1"

	# Invalid ip address, return
	[ -n "$(echo $server | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')" ] || return 0

	# Check mwan3 is enabled or not
	iface=$(cat /var/run/mwan3/indicator 2>/dev/null || echo "unknown")
	[ "$iface" = "unknown" ] && {
		for inet in "wan wwan modem tethering"; do
			[ "$inet" = "$INTERFACE" ] && {
				iface="$INTERFACE"
				break
			}
		done
	}

	# Check again
	[ "$iface" = "unknown" ] && return 0

	network_get_device device $iface
	network_get_gateway gw $iface

	dev=$(ip route list $server | sed 's/.*dev \(.*\)/\1/')
	[ -n "$dev" ] && {                                     
		[ "$dev" = "$device" ] && return 0
		ip route del $server 2>/dev/null  
	}

	[ -n "$device" ] && {
		if [ -n "$gw" ]; then
			ip route add $server via $gw dev $device 2>/dev/null
		else
			ip route add $(ip route show dev $device | sed "s/default/$server/g" | head -n 1) 2>/dev/null || true
		fi
	}
}

wg_main() {
	local ip
	local host
	local enable

	enable=$(uci get wireguard.@proxy[0].enable)
	[ "$enable" = "1" ] || return 

	host=$(uci get wireguard.@proxy[0].host)
	[ -n "$host" ] || return

	ip=$(echo $host | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')

	[ -n "$ip" ] && {
		refresh_route $ip
	}
}

ovpn_enable() {
	local enable

	if [ "$eanble" = "1" ]; then
		return 0
	else
		return 1
	fi
}

ovpn_main() {
	local ip
	local host
	local enable

	eanble=$(uci get glconfig.openvpn.enable 2>/dev/null)
	[ "$eanble" = "1" ] || return

	host=$(uci get glconfig.openvpn.host 2>/dev/null)
	[ -n "$host" ] || return

	ip=$(echo $host | egrep '[0-9]{1,3}(\.[0-9]{1,3}){3}')

	[ -n "$ip" ] && {
		refresh_route $ip
	}
}

main() {
	wg_main
	ovpn_main
}

main

exit 0
